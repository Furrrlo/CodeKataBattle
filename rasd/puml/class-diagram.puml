@startuml

skinparam nodesep 70
skinparam ranksep 100

class Educator {
}

class Student {
}

<> inviteDiamond

Student "1" - inviteDiamond
inviteDiamond -* "0...n" Invite: > sends
inviteDiamond -* "0...n" Invite: > receives<U+00A0><U+00A0>
Invite "0...n" -* "1" TeamPartecipation: > to join

Invite -- InviteState

class Invite {
  +state: InviteState
}

enum InviteState {
    ACCEPTED
    REJECTED
    PENDING
}

Student "1" -down- "0...1" TeamPartecipation: > takes part

class TeamPartecipation {
  +studentCommits: Int
}

note as TeamPartecipationToTeam
One student must have sent invites
and the others must have accepted them
end note
TeamPartecipation "1...n" -down- TeamPartecipationToTeam: > form
TeamPartecipationToTeam -down-* "1" Team

class Team {
}

note as TeamToBattlePartecipation
All students must be subscribed to the tournament
Must respect min/max students contraints
A student must only be in one team at a time for each battle
end note
Team "1" -d- TeamToBattlePartecipation: > takes part
TeamToBattlePartecipation -d- "0...1" BattlePartecipation

class BattlePartecipation {
  +registrationDate: Date
  +score: int
}

Student "0...n" -down-* "0...n" TournamentSubscription: subscribes

class TournamentSubscription {
  +score: Int
  +subscriptionDate: Date
}

note as TournamentSubscriptionToTournament
Must have
subscriptionDate <= subscriptionDeadline
end note
TournamentSubscription "0...n" -down- TournamentSubscriptionToTournament: > referred to
TournamentSubscriptionToTournament -down-* "1" Tournament

class Tournament {
  +state: TournamentState
  +subscriptionDeadline: Date
}

enum TournamentState {
  SUBSCRIBING
  IN_PROGRESS
  DONE
}

note as BattlePartecipationToBattle
Must have 
registrationDate <= registrationDeadline
end note
BattlePartecipation "0...n" -down- BattlePartecipationToBattle: > referred to
BattlePartecipationToBattle -down- "1" Battle

class Battle {
  +state: BattleState
  +description: String
  +softwareProject: Folder
  +minStudents: Int
  +maxStudents: Int
  +registrationDeadline: Date
  +submissionDeadline: Date
  ----
  +requiresManualEvaluation: Bool
}

enum BattleState {
  REGISTRATION
  SUBMISSION
  CONSOLIDATION
  DONE
}

class Repository {
}
note bottom of Repository: Either refers to a Battle or a BattlePartecipation

class Github {
}

class Badge {
  +title: String
  +condition: String
}

Educator "1" --o "0...n" Tournament: > creates
Educator "0...n" -- "1" Tournament : > is allowed
Educator "1" -- "0...n" Battle : < created by
note on link 
must be tournament 
creator or authorized
end note

Tournament - TournamentState

Tournament "1" --* "0...n" Battle: > formed by

Battle - BattleState

Battle "0...1" -* "0...1" Repository
note on link
Exists only past the REGISTRATION state
end note

note as BattlePartecipationToRepository
Exists only past the battle 
REGISTRATION state and if 
the team created it on their own
end note
BattlePartecipation "0...1" - BattlePartecipationToRepository
BattlePartecipationToRepository -* "0...1" Repository

Github "1" - "0...n" Repository: hosts

note as TournamentSubscriptionToBadge
Badge must be defined for this tournament
Student must have fulfilled badge condition
end note
TournamentSubscription "0...n" -- TournamentSubscriptionToBadge : > earns
TournamentSubscriptionToBadge -- "0...n" Badge

Educator "1" -- "0...n" Badge : > creates
Badge "0...n" -- "0...n" Tournament : > is assigned

@enduml